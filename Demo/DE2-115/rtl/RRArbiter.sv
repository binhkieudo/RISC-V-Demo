// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RRArbiter(
  input         clock,
                io_in_0_valid,
  input  [4:0]  io_in_0_bits_rd,
  input  [63:0] io_in_0_bits_data,
  input         io_in_1_valid,
  input  [4:0]  io_in_1_bits_rd,
  input  [63:0] io_in_1_bits_data,
  input         io_in_2_valid,
  input  [4:0]  io_in_2_bits_rd,
  input  [63:0] io_in_2_bits_data,
  input         io_in_3_valid,
  input  [4:0]  io_in_3_bits_rd,
  input  [63:0] io_in_3_bits_data,
  input         io_out_ready,
  output        io_in_0_ready,
                io_in_1_ready,
                io_in_2_ready,
                io_in_3_ready,
                io_out_valid,
  output [4:0]  io_out_bits_rd,
  output [63:0] io_out_bits_data
);

  wire [1:0]       choice;	// @[Arbiter.scala:93:{24,33}]
  wire [3:0]       _GEN = {{io_in_3_valid}, {io_in_2_valid}, {io_in_1_valid}, {io_in_0_valid}};	// @[Arbiter.scala:55:16]
  wire             _io_out_valid_output = _GEN[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
  wire [3:0][4:0]  _GEN_0 = {{io_in_3_bits_rd}, {io_in_2_bits_rd}, {io_in_1_bits_rd}, {io_in_0_bits_rd}};	// @[Arbiter.scala:55:16]
  wire [3:0][63:0] _GEN_1 = {{io_in_3_bits_data}, {io_in_2_bits_data}, {io_in_1_bits_data}, {io_in_0_bits_data}};	// @[Arbiter.scala:55:16]
  reg  [1:0]       lastGrant;	// @[Reg.scala:19:16]
  wire             grantMask_1 = lastGrant == 2'h0;	// @[Arbiter.scala:81:49, :91:{26,35}, Reg.scala:19:16]
  wire             grantMask_3 = lastGrant != 2'h3;	// @[Arbiter.scala:81:49, :89:41, Reg.scala:19:16]
  wire             validMask_1 = io_in_1_valid & grantMask_1;	// @[Arbiter.scala:81:49, :82:76]
  wire             validMask_2 = io_in_2_valid & ~(lastGrant[1]);	// @[Arbiter.scala:81:49, :82:76, Reg.scala:19:16]
  wire             validMask_3 = io_in_3_valid & grantMask_3;	// @[Arbiter.scala:81:49, :82:76]
  wire             _ctrl_T_1 = validMask_1 | validMask_2;	// @[Arbiter.scala:45:68, :82:76]
  wire             _ctrl_T_2 = _ctrl_T_1 | validMask_3;	// @[Arbiter.scala:45:68, :82:76]
  wire             _ctrl_T_3 = _ctrl_T_2 | io_in_0_valid;	// @[Arbiter.scala:45:68]
  wire             _ctrl_T_4 = _ctrl_T_3 | io_in_1_valid;	// @[Arbiter.scala:45:68]
  wire [1:0]       _GEN_2 = {1'h1, ~io_in_2_valid};	// @[Arbiter.scala:81:49, :89:41, :91:{26,35}]
  assign choice = validMask_1 ? 2'h1 : validMask_2 ? 2'h2 : validMask_3 ? 2'h3 : io_in_0_valid ? 2'h0 : io_in_1_valid ? 2'h1 : _GEN_2;	// @[Arbiter.scala:81:49, :82:76, :89:41, :91:{26,35}, :93:{24,33}]
  always @(posedge clock) begin
    if (io_out_ready & _io_out_valid_output) begin	// @[Arbiter.scala:55:16, Decoupled.scala:51:35]
      if (validMask_1)	// @[Arbiter.scala:82:76]
        lastGrant <= 2'h1;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (validMask_2)	// @[Arbiter.scala:82:76]
        lastGrant <= 2'h2;	// @[Arbiter.scala:81:49, Reg.scala:19:16]
      else if (validMask_3)	// @[Arbiter.scala:82:76]
        lastGrant <= 2'h3;	// @[Arbiter.scala:89:41, Reg.scala:19:16]
      else if (io_in_0_valid)
        lastGrant <= 2'h0;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else if (io_in_1_valid)
        lastGrant <= 2'h1;	// @[Arbiter.scala:91:{26,35}, Reg.scala:19:16]
      else
        lastGrant <= _GEN_2;	// @[Arbiter.scala:89:41, :91:{26,35}, Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        lastGrant = _RANDOM_0[1:0];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_in_0_ready = ~_ctrl_T_2 & io_out_ready;	// @[Arbiter.scala:45:{68,78}, :74:21]
  assign io_in_1_ready = (grantMask_1 | ~_ctrl_T_3) & io_out_ready;	// @[Arbiter.scala:45:{68,78}, :74:21, :81:49, :86:50]
  assign io_in_2_ready = (~validMask_1 & ~(lastGrant[1]) | ~_ctrl_T_4) & io_out_ready;	// @[Arbiter.scala:45:{68,78}, :74:21, :81:49, :82:76, :86:{34,50}, Reg.scala:19:16]
  assign io_in_3_ready = (~_ctrl_T_1 & grantMask_3 | ~(_ctrl_T_4 | io_in_2_valid)) & io_out_ready;	// @[Arbiter.scala:45:{68,78}, :74:21, :81:49, :86:{34,50}]
  assign io_out_valid = _io_out_valid_output;	// @[Arbiter.scala:55:16]
  assign io_out_bits_rd = _GEN_0[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
  assign io_out_bits_data = _GEN_1[choice];	// @[Arbiter.scala:55:16, :93:{24,33}]
endmodule

