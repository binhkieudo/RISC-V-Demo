// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RoCCController2(
  input         clock,
                io_clock,
                io_reset,
  input  [63:0] io_decoupler_io_rocc_req_wrdata,
  input  [4:0]  io_decoupler_io_rocc_req_rd,
  input  [6:0]  io_decoupler_io_rocc_req_cmd,
                io_decoupler_io_rocc_req_funct,
  input         io_decoupler_io_rocc_req_valid,
  input  [63:0] io_bb_io_dout,
  input         io_bb_io_empty,
  output        io_decoupler_io_rocc_req_ready,
  output [4:0]  io_decoupler_io_rocc_resp_rd,
  output [63:0] io_decoupler_io_rocc_resp_data,
  output        io_decoupler_io_rocc_resp_valid,
                io_bb_io_iclk,
                io_bb_io_irstn,
                io_bb_io_iwren,
                io_bb_io_irden,
  output [63:0] io_bb_io_din
);

  reg  [4:0] rd_addr;	// @[RoCCController.scala:65:22]
  reg        r_valid;	// @[RoCCController.scala:66:22]
  wire       _io_bb_io_irden_T_2 = io_decoupler_io_rocc_req_cmd == 7'hB;	// @[RoCCController.scala:76:42]
  wire       _io_bb_io_irden_T_3 = io_decoupler_io_rocc_req_cmd == 7'h5B;	// @[RoCCController.scala:76:91]
  always @(posedge clock) begin
    rd_addr <= io_decoupler_io_rocc_req_rd;	// @[RoCCController.scala:65:22]
    r_valid <= io_decoupler_io_rocc_req_valid;	// @[RoCCController.scala:66:22]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        rd_addr = _RANDOM_0[4:0];	// @[RoCCController.scala:65:22]
        r_valid = _RANDOM_0[5];	// @[RoCCController.scala:65:22, :66:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_decoupler_io_rocc_req_ready = ~io_bb_io_empty;	// @[RoCCController.scala:81:37]
  assign io_decoupler_io_rocc_resp_rd = rd_addr;	// @[RoCCController.scala:65:22]
  assign io_decoupler_io_rocc_resp_data = io_bb_io_dout;
  assign io_decoupler_io_rocc_resp_valid = r_valid;	// @[RoCCController.scala:66:22]
  assign io_bb_io_iclk = io_clock;
  assign io_bb_io_irstn = ~io_reset;	// @[RoCCController.scala:69:22]
  assign io_bb_io_iwren = io_decoupler_io_rocc_req_valid & (&io_decoupler_io_rocc_req_funct) & (_io_bb_io_irden_T_2 | _io_bb_io_irden_T_3);	// @[RoCCController.scala:75:{89,106}, :76:{42,59,91}]
  assign io_bb_io_irden = io_decoupler_io_rocc_req_valid & io_decoupler_io_rocc_req_funct == 7'h0 & (_io_bb_io_irden_T_2 | _io_bb_io_irden_T_3);	// @[RoCCController.scala:76:{42,91}, :77:{88,104}, :78:59]
  assign io_bb_io_din = io_decoupler_io_rocc_req_wrdata;
endmodule

