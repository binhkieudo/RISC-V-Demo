// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module ScratchpadSlavePort(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [1:0]  auto_in_a_bits_size,
  input  [9:0]  auto_in_a_bits_source,
  input  [30:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                io_dmem_req_ready,
                io_dmem_s2_nack,
                io_dmem_resp_valid,
  input  [63:0] io_dmem_resp_bits_data_raw,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_size,
  output [9:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data,
  output        io_dmem_req_valid,
  output [39:0] io_dmem_req_bits_addr,
  output [4:0]  io_dmem_req_bits_cmd,
  output [1:0]  io_dmem_req_bits_size,
  output        io_dmem_s1_kill,
  output [63:0] io_dmem_s1_data_data,
  output [7:0]  io_dmem_s1_data_mask
);

  wire [7:0][3:0] _GEN = '{4'h0, 4'h0, 4'h0, 4'h8, 4'hF, 4'hE, 4'hD, 4'hC};	// @[Mux.scala:81:{58,61}]
  reg  [2:0]      state;	// @[ScratchpadSlavePort.scala:46:24]
  wire            _io_dmem_req_bits_T_2 = state == 3'h4;	// @[ScratchpadSlavePort.scala:46:24, :49:17]
  reg  [2:0]      acq_opcode;	// @[ScratchpadSlavePort.scala:55:18]
  reg  [2:0]      acq_param;	// @[ScratchpadSlavePort.scala:55:18]
  reg  [1:0]      acq_size;	// @[ScratchpadSlavePort.scala:55:18]
  reg  [9:0]      acq_source;	// @[ScratchpadSlavePort.scala:55:18]
  reg  [30:0]     acq_address;	// @[ScratchpadSlavePort.scala:55:18]
  reg  [7:0]      acq_mask;	// @[ScratchpadSlavePort.scala:55:18]
  reg  [63:0]     acq_data;	// @[ScratchpadSlavePort.scala:55:18]
  wire            _ready_T = state == 3'h0;	// @[ScratchpadSlavePort.scala:46:24, :49:54, package.scala:16:47]
  wire            _bundleIn_0_d_bits_data_T = state == 3'h2;	// @[ScratchpadSlavePort.scala:46:24, :48:38, package.scala:16:47]
  wire            ready = _ready_T | _bundleIn_0_d_bits_data_T & io_dmem_resp_valid & auto_in_d_ready;	// @[ScratchpadSlavePort.scala:104:{35,78}, package.scala:16:47]
  wire            _io_dmem_req_bits_T = state == 3'h3;	// @[ScratchpadSlavePort.scala:46:24, :52:36, :105:57]
  wire            tl_in_a_ready = io_dmem_req_ready & ready;	// @[ScratchpadSlavePort.scala:104:35, :109:40]
  wire [2:0]      _io_dmem_req_bits_T_1_opcode = _io_dmem_req_bits_T ? acq_opcode : auto_in_a_bits_opcode;	// @[ScratchpadSlavePort.scala:55:18, :105:57, :110:41]
  wire [2:0]      _io_dmem_req_bits_T_1_param = _io_dmem_req_bits_T ? acq_param : auto_in_a_bits_param;	// @[ScratchpadSlavePort.scala:55:18, :105:57, :110:41]
  wire [1:0]      io_dmem_req_bits_req_size = _io_dmem_req_bits_T ? acq_size : auto_in_a_bits_size;	// @[ScratchpadSlavePort.scala:55:18, :105:57, :110:41]
  wire [30:0]     _io_dmem_req_bits_T_1_address = _io_dmem_req_bits_T ? acq_address : auto_in_a_bits_address;	// @[ScratchpadSlavePort.scala:55:18, :105:57, :110:41]
  wire            _io_dmem_req_bits_T_3 = _io_dmem_req_bits_T_1_opcode == 3'h1;	// @[Mux.scala:81:61, ScratchpadSlavePort.scala:48:17, :110:41]
  wire [1:0]      _io_dmem_req_bits_mask_full_desired_mask_T = {_io_dmem_req_bits_T_1_address[0] | (|io_dmem_req_bits_req_size), ~(_io_dmem_req_bits_T_1_address[0])};	// @[AMOALU.scala:18:{27,42,53}, :19:22, Cat.scala:33:92, ScratchpadSlavePort.scala:110:41]
  wire [3:0]      _io_dmem_req_bits_mask_full_desired_mask_T_1 = {(_io_dmem_req_bits_T_1_address[1] ? _io_dmem_req_bits_mask_full_desired_mask_T : 2'h0) | {2{io_dmem_req_bits_req_size[1]}}, _io_dmem_req_bits_T_1_address[1] ? 2'h0 : _io_dmem_req_bits_mask_full_desired_mask_T};	// @[AMOALU.scala:18:{22,27,42,47,53}, :19:22, Bundles.scala:259:74, Cat.scala:33:92, ScratchpadSlavePort.scala:110:41]
  wire            tl_in_d_valid = io_dmem_resp_valid | state == 3'h5;	// @[ScratchpadSlavePort.scala:46:24, :50:39, :116:{41,50}]
  reg  [63:0]     bundleIn_0_d_bits_data_r;	// @[Reg.scala:19:16]
  always @(posedge clock) begin
    if (reset)
      state <= 3'h4;	// @[ScratchpadSlavePort.scala:46:24]
    else if ((auto_in_a_valid & ready | _io_dmem_req_bits_T) & io_dmem_req_ready)	// @[ScratchpadSlavePort.scala:53:26, :104:35, :105:{38,48,57}]
      state <= 3'h1;	// @[ScratchpadSlavePort.scala:46:24, :48:17]
    else if (io_dmem_s2_nack)
      state <= 3'h3;	// @[ScratchpadSlavePort.scala:46:24, :52:36]
    else if (auto_in_d_ready & tl_in_d_valid)	// @[Decoupled.scala:51:35, ScratchpadSlavePort.scala:116:41]
      state <= 3'h0;	// @[ScratchpadSlavePort.scala:46:24, :49:54]
    else if (io_dmem_resp_valid)
      state <= 3'h5;	// @[ScratchpadSlavePort.scala:46:24, :50:39]
    else if (_io_dmem_req_bits_T_2 & auto_in_a_valid)	// @[ScratchpadSlavePort.scala:49:{17,28}]
      state <= 3'h0;	// @[ScratchpadSlavePort.scala:46:24, :49:54]
    else if (state == 3'h1)	// @[ScratchpadSlavePort.scala:46:24, :48:17]
      state <= 3'h2;	// @[ScratchpadSlavePort.scala:46:24, :48:38]
    if (tl_in_a_ready & auto_in_a_valid) begin	// @[Decoupled.scala:51:35, ScratchpadSlavePort.scala:109:40]
      acq_opcode <= auto_in_a_bits_opcode;	// @[ScratchpadSlavePort.scala:55:18]
      acq_param <= auto_in_a_bits_param;	// @[ScratchpadSlavePort.scala:55:18]
      acq_size <= auto_in_a_bits_size;	// @[ScratchpadSlavePort.scala:55:18]
      acq_source <= auto_in_a_bits_source;	// @[ScratchpadSlavePort.scala:55:18]
      acq_address <= auto_in_a_bits_address;	// @[ScratchpadSlavePort.scala:55:18]
      acq_mask <= auto_in_a_bits_mask;	// @[ScratchpadSlavePort.scala:55:18]
      acq_data <= auto_in_a_bits_data;	// @[ScratchpadSlavePort.scala:55:18]
    end
    if (_bundleIn_0_d_bits_data_T)	// @[package.scala:16:47]
      bundleIn_0_d_bits_data_r <= io_dmem_resp_bits_data_raw;	// @[Reg.scala:19:16]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        state = _RANDOM_0[2:0];	// @[ScratchpadSlavePort.scala:46:24]
        acq_opcode = _RANDOM_0[5:3];	// @[ScratchpadSlavePort.scala:46:24, :55:18]
        acq_param = _RANDOM_0[8:6];	// @[ScratchpadSlavePort.scala:46:24, :55:18]
        acq_size = _RANDOM_0[10:9];	// @[ScratchpadSlavePort.scala:46:24, :55:18]
        acq_source = _RANDOM_0[20:11];	// @[ScratchpadSlavePort.scala:46:24, :55:18]
        acq_address = {_RANDOM_0[31:21], _RANDOM_1[19:0]};	// @[ScratchpadSlavePort.scala:46:24, :55:18]
        acq_mask = _RANDOM_1[27:20];	// @[ScratchpadSlavePort.scala:55:18]
        acq_data = {_RANDOM_1[31:28], _RANDOM_2, _RANDOM_3[27:0]};	// @[ScratchpadSlavePort.scala:55:18]
        bundleIn_0_d_bits_data_r = {_RANDOM_3[31:29], _RANDOM_4, _RANDOM_5[28:0]};	// @[Reg.scala:19:16, ScratchpadSlavePort.scala:55:18]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign auto_in_a_ready = tl_in_a_ready;	// @[ScratchpadSlavePort.scala:109:40]
  assign auto_in_d_valid = tl_in_d_valid;	// @[ScratchpadSlavePort.scala:116:41]
  assign auto_in_d_bits_opcode = {2'h0, ~(acq_opcode == 3'h0 | acq_opcode == 3'h1)};	// @[Bundles.scala:259:74, ScratchpadSlavePort.scala:48:17, :49:54, :55:18, :117:24, package.scala:16:47, :73:59]
  assign auto_in_d_bits_size = acq_size;	// @[ScratchpadSlavePort.scala:55:18]
  assign auto_in_d_bits_source = acq_source;	// @[ScratchpadSlavePort.scala:55:18]
  assign auto_in_d_bits_data = _bundleIn_0_d_bits_data_T ? io_dmem_resp_bits_data_raw : bundleIn_0_d_bits_data_r;	// @[Reg.scala:19:16, package.scala:16:47, :80:42]
  assign io_dmem_req_valid = auto_in_a_valid & (_ready_T | _bundleIn_0_d_bits_data_T) | _io_dmem_req_bits_T;	// @[ScratchpadSlavePort.scala:105:57, :106:{48,65}, package.scala:16:47, :73:59]
  assign io_dmem_req_bits_addr = {9'h0, _io_dmem_req_bits_T_1_address};	// @[ScratchpadSlavePort.scala:88:16, :110:41]
  assign io_dmem_req_bits_cmd = _io_dmem_req_bits_T_2 | _io_dmem_req_bits_T_3 & (&((_io_dmem_req_bits_T ? acq_mask : auto_in_a_bits_mask) | ~{(_io_dmem_req_bits_T_1_address[2] ? _io_dmem_req_bits_mask_full_desired_mask_T_1 : 4'h0) | {4{&io_dmem_req_bits_req_size}}, _io_dmem_req_bits_T_1_address[2] ? 4'h0 : _io_dmem_req_bits_mask_full_desired_mask_T_1})) ? 5'h1 : _io_dmem_req_bits_T_1_opcode == 3'h4 ? 5'h0 : _io_dmem_req_bits_T_1_opcode == 3'h3 ? {1'h0, _io_dmem_req_bits_T_1_param == 3'h3 ? 4'h4 : _io_dmem_req_bits_T_1_param == 3'h2 ? 4'hB : _io_dmem_req_bits_T_1_param == 3'h1 ? 4'hA : _io_dmem_req_bits_T_1_param == 3'h0 ? 4'h9 : 4'h0} : _io_dmem_req_bits_T_1_opcode == 3'h2 ? {1'h0, _GEN[_io_dmem_req_bits_T_1_param]} : _io_dmem_req_bits_T_3 ? 5'h11 : {4'h0, _io_dmem_req_bits_T_1_opcode == 3'h0};	// @[AMOALU.scala:18:{22,27,42,47,53}, :19:22, Cat.scala:33:92, Mux.scala:81:{58,61}, ScratchpadSlavePort.scala:46:24, :48:{17,38}, :49:{17,54}, :52:36, :55:18, :60:15, :80:{17,19,34}, :82:{30,73,88}, :83:17, :105:57, :110:41]
  assign io_dmem_req_bits_size = io_dmem_req_bits_req_size;	// @[ScratchpadSlavePort.scala:110:41]
  assign io_dmem_s1_kill = state != 3'h1;	// @[ScratchpadSlavePort.scala:46:24, :48:17, :113:30]
  assign io_dmem_s1_data_data = acq_data;	// @[ScratchpadSlavePort.scala:55:18]
  assign io_dmem_s1_data_mask = acq_mask;	// @[ScratchpadSlavePort.scala:55:18]
endmodule

