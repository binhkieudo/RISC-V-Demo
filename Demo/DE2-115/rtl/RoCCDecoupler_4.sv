// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RoCCDecoupler_4(
  input         io_rocc_io_cmd_valid,
  input  [6:0]  io_rocc_io_cmd_bits_inst_funct,
  input  [4:0]  io_rocc_io_cmd_bits_inst_rd,
  input  [6:0]  io_rocc_io_cmd_bits_inst_opcode,
  input  [63:0] io_rocc_io_cmd_bits_rs1,
  input         io_controller_io_rocc_req_ready,
  input  [4:0]  io_controller_io_rocc_resp_rd,
  input  [63:0] io_controller_io_rocc_resp_data,
  input         io_controller_io_rocc_resp_valid,
  output        io_rocc_io_cmd_ready,
                io_rocc_io_resp_valid,
  output [4:0]  io_rocc_io_resp_bits_rd,
  output [63:0] io_rocc_io_resp_bits_data,
                io_controller_io_rocc_req_wrdata,
  output [4:0]  io_controller_io_rocc_req_rd,
  output [6:0]  io_controller_io_rocc_req_cmd,
                io_controller_io_rocc_req_funct,
  output        io_controller_io_rocc_req_valid
);

  assign io_rocc_io_cmd_ready = io_controller_io_rocc_req_ready;
  assign io_rocc_io_resp_valid = io_controller_io_rocc_resp_valid;
  assign io_rocc_io_resp_bits_rd = io_controller_io_rocc_resp_rd;
  assign io_rocc_io_resp_bits_data = io_controller_io_rocc_resp_data;
  assign io_controller_io_rocc_req_wrdata = io_rocc_io_cmd_bits_rs1;
  assign io_controller_io_rocc_req_rd = io_rocc_io_cmd_bits_inst_rd;
  assign io_controller_io_rocc_req_cmd = io_rocc_io_cmd_bits_inst_opcode;
  assign io_controller_io_rocc_req_funct = io_rocc_io_cmd_bits_inst_funct;
  assign io_controller_io_rocc_req_valid = io_rocc_io_cmd_valid;
endmodule

